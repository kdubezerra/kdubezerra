/*! \file ServerEventInterface.h
 */

#pragma once

#include "config.h"

/*! \brief All classes in P2PSE layer 0 are scoped by P2PSEL0 namespace. This is very useful
to avoid name collision between different layers.
*/
namespace P2PSEL0
{

	/*! \brief This interface is the access point to server-side callbacks generated by P2PSE layer 0.
	The next layer must implement all the below callbacks in order to be told about all events of layer 0
	*/
	class CServerEventInterface
	{
	public:
		/*! \brief Virtual destructor (unuseful) */
		virtual ~CServerEventInterface() {}

		/*! \brief Callback that signalizes that a client has properly connect to the server.
		\param id the unique session identifier assigned by layer 0 server to this client.
		\param oMessage message sent by the client in the connection request
		*/	
		virtual void ClientConnected(const TClientID id, const buffer_c& oMessage) = 0;

		/*! \brief Callback that signalizes that a client has disconnected from the server.
		\param id the unique session identifier of the disconnected client.
		\param oMessage if disconnection was initiated by the server side, the message sent by the client in the disconnection packet
		*/
		virtual void ClientDisconnected(const TClientID id, const buffer_c& oMessage) = 0;

		/*! \brief Callback that signalizes that a client has successufully joined a group.
		\param groupId the unique identifier of the group where the client has joined
		\param id the unique session identifier of the client that has joined the group
		*/
		virtual void PeerJoined(const TGroupID groupId, const TClientID clientId ) = 0;

		/*! \brief Callback that signalizes that a client has successufully left a group.
		\param groupId the unique identifier of the group where the client has left
		\param id the unique session identifier of the client that has left the group
		*/
		virtual void PeerLeft(const TGroupID groupId, const TClientID id) = 0;

		/*! \brief Callback that asks the next layer if it must accept a connection request from a remote host.
		\param oMessage the message sent by the potential client in the connection request message
		\param oAddress the address (IP:port) of the remote host that requested a connection with the server
		\return true if layer 0 must accept the connection request with this address
		*/
		virtual const bool ClientAccept(const buffer_c& oMessage, const address_c& oAddress) = 0;

		/*! \brief Callback that signalizes that layer 0 received data from a client
		\param id the unique session identifier of the client that has left the group
		\param oUnreliable the unreliable portion of the UDP packet where the incoming data come from
		\return nothing useful
		*/
		virtual const bool IncomingData(const TClientID id, const buffer_c& oUnreliable) = 0;

		/*! \brief Callback that signalizes that a previously call to MoveToGroup() service has failed.
		\param id the unique session identifier of the client that was not successfully moved to a group
		\return nothing useful
		*/
		virtual void GroupConnectionFailed(const TClientID id) = 0;
	};
}

